{"version":3,"sources":["ducks/jobs.js","components/shared/FavoriteButton.jsx","components/JobIndex/JobCard.jsx","components/JobIndex/Search.jsx","components/JobIndex/index.jsx","components/JobDetails/JobPage.jsx","components/JobDetails/index.jsx","store/rootReducer.js","store/index.js","serviceWorker.js","index.jsx","App/index.jsx"],"names":["INTERNAL_API_URL","prefix","FETCH_JOBS","ADD_FAVORITE","REMOVE_FAVORITE","toggleFavorite","payload","job","newJob","api_id","favorite","mergeJobs","favoriteJobs","queriedJobs","favoriteIds","map","dedupedQueriedJobs","filter","includes","id","concat","fetchJobs","query","dispatch","a","async","fetch","then","res","json","jobs","type","useDispatch","className","onClick","method","apiId","headers","get","removeFavorite","body","JSON","stringify","addFavorite","location","salary","split","amount","trim","join","remote","city","country","to","company","name","src","logo_url","alt","title","useState","setQuery","onSubmit","event","preventDefault","value","onChange","target","main","useSelector","state","length","key","href","Search","onSite","country_flag_url","height","sal","parsedGroup","description","parse","functions","benefits","published_at","url","seniority","modality","match","useRouteMatch","j","params","rootReducer","combineReducers","window","__REDUX_DEVTOOLS_EXTENSION__","x","middlewares","applyMiddleware","thunk","fn","undefined","createStoreWithMiddleware","compose","createStore","Boolean","hostname","ReactDOM","render","store","exact","path","component","JobIndex","JobDetails","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96379c22.chunk.js","sourcesContent":["// Single point of control for API URLs\nconst INTERNAL_API_URL = 'https://fave-jobs-api.herokuapp.com/jobs';\nconst EXTERNAL_API_URL = 'https://www.getonbrd.com/search/jobs';\n\n// Action types\nconst prefix = 'fave-jobs-react/jobs';\nconst FETCH_JOBS = `${prefix}/FETCH_JOBS`;\nconst ADD_FAVORITE = `${prefix}/ADD_FAVORITE`;\nconst REMOVE_FAVORITE = `${prefix}/REMOVE_FAVORITE`;\n\n// Helpers\nconst toggleFavorite = (payload, job) => {\n  let newJob = job;\n  if (payload.api_id === job.api_id) {\n    newJob = { ...job, favorite: !job.favorite };\n  }\n  return newJob;\n};\n\n// If a job is already a favorite and also gets fetched from the external API,\n// don't show it twice.\nconst mergeJobs = (favoriteJobs, queriedJobs) => {\n  const favoriteIds = favoriteJobs.map((job) => job.api_id);\n  const dedupedQueriedJobs = queriedJobs.filter(\n    (job) => !favoriteIds.includes(job.id),\n  );\n  return favoriteJobs.concat(dedupedQueriedJobs);\n};\n\n// Reducer\nexport default (state = [], { type, payload }) => {\n  switch (type) {\n    case FETCH_JOBS:\n      return payload;\n    case ADD_FAVORITE:\n    case REMOVE_FAVORITE:\n      return state.map((job) => toggleFavorite(payload, job));\n    default:\n      return state;\n  }\n};\n\n// Action creators\nexport const fetchJobs = (query) => async (dispatch) => {\n  // We always need to fetch the user's favorite jobs\n  const favoriteJobs = await fetch(`${INTERNAL_API_URL}`)\n    .then((res) => res.json())\n    .then((jobs) => {\n      const payload = jobs.map((job) => ({ ...job, favorite: true }));\n      if (!query) { dispatch({ type: FETCH_JOBS, payload }); }\n      return payload;\n    });\n\n  // If this fetch is not due to a query, don't try to fetch jobs with a\n  // query parameter.\n  // I do prefer to check this twice - one inside the Promise and the other\n  // outside - over nesting the second promise inside the first one.\n  if (!query) { return; }\n\n  fetch(`${EXTERNAL_API_URL}?q=${query}`)\n    .then((res) => res.json())\n    .then((payload) => {\n      const queriedJobs = payload.jobs.map(\n        (job) => ({ ...job, favorite: false, api_id: job.id }),\n      );\n      // Show the favorite jobs *and* the ones from the search\n      const jobs = mergeJobs(favoriteJobs, queriedJobs);\n      return dispatch({ type: FETCH_JOBS, payload: jobs });\n    });\n};\n\nexport const addFavorite = (job) => (dispatch) => {\n  fetch(`${INTERNAL_API_URL}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(job),\n  })\n    .then((res) => res.json())\n    .then((payload) => dispatch({ type: ADD_FAVORITE, payload }));\n};\n\nexport const removeFavorite = (job) => (dispatch) => {\n  fetch(`${INTERNAL_API_URL}/${job.api_id}`, { method: 'DELETE' })\n    .then((res) => {\n      const apiId = res.headers.get('Api-Id');\n      dispatch({ type: REMOVE_FAVORITE, payload: { api_id: apiId } });\n    });\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addFavorite, removeFavorite } from '../../ducks/jobs';\nimport './FavoriteButton.css';\n\nexport default ({ job }) => {\n  const dispatch = useDispatch();\n  if (job.favorite) {\n    return (\n      <button\n        type=\"button\"\n        className=\"fave-button fave-button--yes\"\n        onClick={() => dispatch(removeFavorite(job))}\n      >\n        <span\n          className=\"fave-button__text fave-button__text--normal\"\n        >\n          Favorite job!\n        </span>\n      </button>\n    );\n  }\n  return (\n    <button\n      type=\"button\"\n      className=\"fave-button fave-button--no\"\n      onClick={() => dispatch(addFavorite(job))}\n    >\n      Add to favorites\n    </button>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport FavoriteButton from '../shared/FavoriteButton';\nimport './JobCard.css';\nimport '../shared/job.css';\n\nexport default ({ job }) => {\n  const salary = job.salary\n    .split('-')\n    .map((amount) => `$${amount.trim()}`)\n    .join(' - ');\n\n  let location;\n  if (job.remote) {\n    location = (\n      <span>\n        This is a\n        <strong> remote </strong>\n        job.\n      </span>\n    );\n  } else {\n    location = <span>{`This job is in ${job.city}, ${job.country}`}</span>;\n  }\n  return (\n    <div className=\"job__wrapper\">\n      <div className=\"job job--card\">\n        <Link to={job.api_id} className=\"job__link\">\n          <h3>{job.company.name}</h3>\n          <img\n            src={job.logo_url}\n            alt={job.company.name}\n            className=\"job__logo\"\n          />\n          <p>{job.title}</p>\n          <p>{salary}</p>\n          <p>{location}</p>\n        </Link>\n        <FavoriteButton job={job} />\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchJobs } from '../../ducks/jobs';\n\nexport default () => {\n  const dispatch = useDispatch();\n\n  const [query, setQuery] = useState('');\n  const handleChange = (event) => setQuery(event.target.value);\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    dispatch(fetchJobs(query));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input value={query} onChange={handleChange} />\n      <button type=\"submit\">Search jobs</button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchJobs } from '../../ducks/jobs';\nimport JobCard from './JobCard';\nimport Search from './Search';\nimport './index.css';\n\nexport default () => {\n  const dispatch = useDispatch();\n\n  // Get jobs from Redux state\n  let [jobs] = useState([]);\n  jobs = useSelector((state) => state.jobs);\n\n  // Display jobs if available, fetch them otherwise\n  let main;\n  if (jobs.length > 0) {\n    main = jobs.map((job) => <JobCard job={job} key={job.id} />);\n  } else {\n    main = <p>Loading...</p>;\n    dispatch(fetchJobs(''));\n  }\n  return (\n    <div className=\"index\">\n      <header>\n        <h1>My Favorite Job Offers</h1>\n        <p className=\"index__powered-by\">\n          powered by&nbsp;\n          <a\n            href=\"https://www.getonbrd.com/\"\n            className=\"index__link\"\n          >\n            Get on Board\n          </a>\n        </p>\n        <Search />\n      </header>\n      <main>\n        {main}\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport parse from 'html-react-parser';\nimport { Link } from 'react-router-dom';\n\nimport FavoriteButton from '../shared/FavoriteButton';\nimport './JobPage.css';\nimport '../shared/job.css';\n\nexport default ({ job }) => {\n  const onSite = (\n    <span>\n      {`${job.city}, ${job.country}`}\n      &nbsp;\n      <img\n        src={job.country_flag_url}\n        alt={`flag of ${job.country}`}\n        height=\"25px\"\n      />\n    </span>\n  );\n  const location = job.remote ? 'remote' : onSite;\n  const salary = job.salary\n    .split('-')\n    .map((sal) => `$${sal.trim()}`)\n    .join(' - ');\n  const parsedGroup = (\n    <div className=\"job__text\">\n      {job.description ? parse(job.description) : null}\n      {job.functions ? parse(job.functions) : null}\n      {job.benefits ? parse(job.benefits) : null}\n    </div>\n  );\n  return (\n    <div className=\"job job--details\">\n      <Link to=\"/\">\n        <small>\n          {'<'}\n          - back\n        </small>\n      </Link>\n      <h1>{job.title}</h1>\n      <div className=\"btn-container\">\n        <FavoriteButton job={job} />\n        <br />\n        <img src={job.logo_url} alt={`${job.company.name} logo`} />\n      </div>\n      <p>\n        Published on&nbsp;\n        {job.published_at}\n        &nbsp;|&nbsp;\n        See on&nbsp;\n        <a href={`https://getonbrd.com${job.url}`}>Get on Board</a>\n      </p>\n      <p>\n        {job.seniority}\n        &nbsp;|&nbsp;\n        {salary}\n        &nbsp;|&nbsp;\n        {job.modality}\n        &nbsp;|&nbsp;\n        {location}\n      </p>\n      {parsedGroup}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport JobPage from './JobPage';\n\nexport default () => {\n  const match = useRouteMatch();\n  const [job] = useSelector((state) => state.jobs.filter(\n    (j) => j.api_id === match.params.id,\n  ));\n  return <JobPage job={job} />;\n};\n","import { combineReducers } from 'redux';\nimport jobsReducer from '../ducks/jobs';\n\nconst rootReducer = combineReducers({ jobs: jobsReducer });\nexport default rootReducer;\n","/* eslint no-underscore-dangle: [\"error\",\n  { \"allow\": [\"__REDUX_DEVTOOLS_EXTENSION__\"] }] */\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './rootReducer';\n\nwindow.__REDUX_DEVTOOLS_EXTENSION__ = window.__REDUX_DEVTOOLS_EXTENSION__\n  || function id(x) { return x; };\n\nconst middlewares = [\n  applyMiddleware(thunk),\n  window.__REDUX_DEVTOOLS_EXTENSION__(),\n].filter((fn) => fn !== undefined && fn !== null);\n\nconst createStoreWithMiddleware = compose(...middlewares)(createStore);\nexport default createStoreWithMiddleware(rootReducer);\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport JobIndex from '../components/JobIndex';\nimport JobDetails from '../components/JobDetails';\nimport store from '../store';\n\nexport default () => (\n  <Provider store={store}>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={JobIndex} />\n        <Route path=\"/:id\" component={JobDetails} />\n      </Switch>\n    </Router>\n  </Provider>\n);\n"],"sourceRoot":""}